{
  "en": {
    "titan-control-slide-1": "Titan Control is a unique cloud service.<br><br>We worked in a standard-sized team: <br>1 Team Lead<br>1 Project Manager <br>3 Backend Developers <br>1 Frontend Developer <br>2 QA Testers<br>1 Designer<br>1 DevOps<br><br>",
    "titan-control-slide-2": "I was responsible for developing the REST API using Python / Django / DRF stack.<br>Throughout the project, I had to communicate with various team members to achieve the best results.<br><br>At the earliest stages, I implemented versioning in the API architecture, which later helped mobile developers when we transitioned to the second version.",
    "titan-control-slide-3": "When we started developing the second version, I initiated the implementation of automated testing. Eventually, in addition to easing the process of making changes and adding new features, this proved beneficial during the certification process.",
    "titan-control-slide-4": "In the end, our team resolved all encountered issues, bugs, and other challenges.<br><br>The project won 3rd place in the transport security competition against competitors such as Domodedovo Airport and the Transport Security Center.",
    "prodlogistica-slide-1": "Mobile application for procurement managers at Prodlogistika South<br><br>A project aimed at automating the business process of receiving supply requests.<br><br>Before automation, managers had to record orders 'on the go' during phone calls from clients and then relay them to 1C operators by phone.<br><br>",
    "prodlogistica-slide-2": "Under my supervision, a small team of three developed a mobile application that allowed managers to create orders, search for products, and send them directly to the 1C database.",
    "prodlogistica-slide-3": "A mid-tier NoSQL database, ElasticSearch, was implemented for quick and flexible searching.<br><br>Backend: Django / DRF / Celery / Redis<br><br>Integration with 1C: FastAPI / WinAPI (COM/OLE)<br>",
    "prodlogistica-slide-4": "As a result, the mobile application was configured and installed on the employees' tablets.",
    "tend-manager-slide-1": "TendManager is my first project that brought financial benefits to the company.<br><br>The primary goal is to increase productivity and automate routine processes at the tender department manager's workplace.<br>",
    "tend-manager-slide-2": "The application is built with PyQt5.<br>The main window can be docked either on the left or right side of the screen.<br><br>When hovering the mouse cursor over the edge of the blue bar, the window slightly slid out along the X axis, allowing concurrent work with tender platforms such as SBIS.<br><br>The window itself is a form.<br>On the left side are attached documents; on the right are procurement input data.",
    "tend-manager-slide-3": "The application features a flexible system for configuring tender projects.<br><br>The ability to assign custom variables for document templating.<br><br>By default, a tender project consists of a cost calculation file, a structure of completed template documents, various declarations, and a 'Supply Request' file.<br><br>All these documents are attached in varying compositions based on specific conditions.<br>",
    "tend-manager-slide-4": "The most routine and challenging part of the job is processing the supply request. This document must be filled out according to specific rules to proceed to the next stage of the tender auction.<br><br>To partially automate this process, two versions of the validator were developed. As a result, the efficiency of processing tender projects increased by up to 50% per employee.<br><br>A thesis on this project was written and successfully defended.",
    "tend-manager-slide-5": "The most routine and challenging part of the job is processing the supply request. This document must be filled out according to specific rules to proceed to the next stage of the tender auction.<br><br>To partially automate this process, two versions of the validator were developed. As a result, the efficiency of processing tender projects increased by up to 50% per employee.<br><br>A thesis on this project was written and successfully defended."
  },
  "ru": {
    "titan-control-slide-1": "Титан-Контроль — уникальный «облачный» сервис<br><br>Мы работали в стандартной по размеру команде: <br>1 Тим-лид<br>1 Project менеджер <br>3 Backend разработчика <br>1 Frontend разработчик <br>2 QA тестировщика<br>1 Дизайнер<br>1 DevOps<br><br>",
    "titan-control-slide-2": "Я был ответственен за разработку REST API на стеке Python / Django / DRF<br>В процессе работы приходилось коммуницировать с различными членами команды для достижения наилучшего результата. <br><br>На самых ранних этапах я внедрил версионирование в архитектуру API что помогло в дальнейшем мобильным разработчикам, когда мы перешли на вторую версию.",
    "titan-control-slide-3": "Когда мы начинали разрабатывать вторую версию, я инициировал внедрение автоматизированного тестирования. В дальнейшем, помимо удобства разработки правок и внедрения нового функционала, это принесло пользу во время прохождения процесса сертификации.",
    "titan-control-slide-4": "В конечном итоге мы с командой решили все возникшие проблемы, баги и прочие трудности. <br><br>Проект занял III место в конкурсе транспортной безопасности серди таких конкурентов как аэропорт Домодедово и центр транспортной безопасности.  ",
    "prodlogistica-slide-1": "Мобильное приложение для менеджеров по закупкам в компании Продлогистика ЮГ <br><br>Проект по автоматизации бизнес-процесса приема заявок на поставку. <br><br>До автоматизации менеджерам приходилось записывать заказы \"на коленке\" при звонках от клиентов и затем передавать их операторам 1С по телефону. <br><br>",
    "prodlogistica-slide-2": "Под моим руководством небольшая команда из трех человек разработала мобильное приложение, которое позволило менеджерам, создавать заказы, искать продукты и отправлять их напрямую в базу 1С.",
    "prodlogistica-slide-3": "Для настройки быстрого и гибкого поиска была внедрена промежуточная NoSql база данных ElasticSearch<br><br>Бекенд Django / DRF / Celery / Redis<br><br>Инеграция с 1C FastAPI /  Winapi (COM/OLE) <br>",
    "prodlogistica-slide-4": "В итоге мобильное приложение было настроено и установлено на планшеты сотрудников.",
    "tend-manager-slide-1": "TendManager - это первый мой проект который принес финансовую пользу для компании<br><br>Его основная задача - повышение производительности и автоматизация рутинных процессов на рабочем месте менеджера тендерного отдела. <br>",
    "tend-manager-slide-2": "Приложение написано на PyQt5 <br>Главное окно можно закрепить либо слева либо справа по середине экрана.<br><br>При наведении курсора мыши на край синей полоски окно немного выезжало по оси X, это позволяло одновременно работать с тендерной платформой такой как SBIS.<br><br>Само окно представляет из себя форму.<br>Слева прикрепляемые документы, справа вводные данные закупки",
    "tend-manager-slide-3": "В приложении была разработана гибкая система настройки тендерных проектов.<br><br>Возможность назначить собственные переменные, для шаблонизации документов. <br><br>По умолчанию тендерный проект представляет из себя расчетный файл, структуру заполненных документов-шаблонов, различные декларации и файл “Заявка на поставку”<br><br>Все эти документы прикладываются в разном составе в зависимости от различных условий<br>",
    "tend-manager-slide-4": "Самая рутинная и трудная часть работы - обработка заявки на поставку. Этот документ нужно заполнить по определенным правилам, для того что бы пройти на следующий этап тендерного аукциона.<br><br>Для частичной автоматизации этого процесса было разработано две версии валидатора. В конечном итоге производительность обработки тендерных проектов выросла до 50% на одного сотрудника. <br><br>По данному проекту была написана и успешно защищена дипломная работа.",
    "tend-manager-slide-5": "Самая рутинная и трудная часть работы - обработка заявки на поставку. Этот документ нужно заполнить по определенным правилам, для того что бы пройти на следующий этап тендерного аукциона.<br><br>Для частичной автоматизации этого процесса было разработано две версии валидатора. В конечном итоге производительность обработки тендерных проектов выросла до 50% на одного сотрудника. <br><br>По данному проекту была написана и успешно защищена дипломная работа."
  }
}
